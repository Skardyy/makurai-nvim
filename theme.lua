local p = require("makurai.palette")

vim.g.colors_name = "makurai"
vim.opt.background = "dark"
vim.cmd("hi clear")

-- Define highlight groups
local hi = function(group, opts)
  vim.api.nvim_set_hl(0, group, opts)
end

-- Basic editor colors
hi("Normal", { fg = p.fg, bg = p.bg })
hi("ColorColumn", { bg = "NONE", fg = "NONE" })
hi("CurSearch", { bg = p.yellow, fg = p.on_fg })
hi("CursorLine", { bg = p.bg_1 })
hi("Directory", { fg = p.accent })
hi("DiffAdd", { fg = p.green })
hi("DiffChange", { fg = p.fg })
hi("DiffDelete", { fg = p.light_red })
hi("DiffText", { fg = p.fg })
hi("EndOfBuffer", { fg = p.comment })
hi("TermCursor", { fg = p.on_fg, bg = p.yellow })
hi("TermCursorNC", { fg = p.on_fg, bg = p.fg })
hi("ErrorMsg", { fg = p.red })
hi("VertSplit", { fg = p.border, bg = p.border })
hi("IncSearch", { fg = p.on_fg, bg = p.yellow })
hi("LineNr", { fg = p.comment })
hi("CursorLineNr", { fg = p.accent })
hi("MatchParen", { fg = p.accent })
hi("ModeMsg", { fg = p.green })
hi("MsgArea", { fg = p.yellow })
hi("MsgSeparator", { fg = p.border, bg = p.border })
hi("NormalFloat", { bg = "NONE", fg = p.border })
hi("FloatBorder", { fg = p.border })
hi("Pmenu", { fg = p.fg })
hi("Question", { fg = p.yellow })
hi("QuickFixLine", { fg = p.yellow })
hi("Search", { fg = p.on_fg, bg = p.border })
hi("StatusLine", { bg = p.bg, fg = p.border })
hi("StatusLineNC", { bg = p.bg, fg = p.border })
hi("TabLine", { bg = p.bg, fg = p.border })
hi("TabLineSel", { bg = p.comment, fg = p.fg })
hi("Visual", { bg = p.selection })
hi("WarningMsg", { fg = p.yellow })
hi("Whitespace", { fg = p.comment })
hi("Winseparator", { fg = p.border })

-- Syntax highlighting
hi("Comment", { fg = p.comment })
hi("Constant", { fg = p.purple })
hi("String", { fg = p.green })
hi("Character", { fg = p.purple })
hi("Number", { fg = p.purple })
hi("Boolean", { fg = p.purple })
hi("Float", { fg = p.purple })
hi("Identifier", { fg = p.fg })
hi("Function", { fg = p.yellow })
hi("Statement", { fg = p.orange })
hi("Conditional", { fg = p.orange })
hi("Repeat", { fg = p.orange })
hi("Label", { fg = p.orange })
hi("Operator", { fg = p.fg })
hi("Keyword", { fg = p.orange })
hi("Exception", { fg = p.orange })
hi("PreProc", { fg = p.yellow })
hi("Include", { fg = p.orange })
hi("Define", { fg = p.orange })
hi("Macro", { fg = p.orange })
hi("PreCondit", { fg = p.orange })
hi("Type", { fg = p.blue })
hi("StorageClass", { fg = p.blue })
hi("Structure", { fg = p.blue })
hi("Typedef", { fg = p.blue })
hi("Special", { fg = p.blue })
hi("Underlined", { fg = p.cyan, underline = true })
hi("Error", { bg = p.light_red, fg = p.on_fg })
hi("Todo", { bg = p.yellow, fg = p.on_fg })

-- LSP and Diagnostic
hi("LspReferenceText", { fg = p.fg })
hi("DiagnosticError", { fg = p.light_red, bold = true })
hi("DiagnosticWarn", { fg = p.yellow, bold = true })
hi("DiagnosticInfo", { fg = p.light_cyan, bold = true })
hi("DiagnosticHint", { fg = p.light_blue, bold = true })
hi("DiagnosticOk", { fg = p.green, bold = true })

-- TreeSitter groups
hi("@text.literal", { fg = p.comment })
hi("@text.reference", { fg = p.fg })
hi("@comment", { fg = p.comment })
hi("@punctuation", { fg = p.fg })
hi("@constant", { fg = p.purple })
hi("@constant.builtin", { fg = p.purple })
hi("@constant.macro", { fg = p.orange })
hi("@define", { fg = p.orange })
hi("@macro", { fg = p.orange })
hi("@string", { fg = p.green })
hi("@string.escape", { fg = p.purple })
hi("@string.special", { fg = p.purple })
hi("@character", { fg = p.green })
hi("@number", { fg = p.purple })
hi("@boolean", { fg = p.purple })
hi("@float", { fg = p.purple })
hi("@function", { fg = p.yellow })
hi("@function.builtin", { fg = p.yellow })
hi("@function.macro", { fg = p.yellow })
hi("@parameter", { fg = p.fg })
hi("@method", { fg = p.yellow })
hi("@field", { fg = p.fg })
hi("@property", { fg = p.fg })
hi("@constructor", { fg = p.blue })
hi("@conditional", { fg = p.orange })
hi("@repeat", { fg = p.orange })
hi("@label", { fg = p.orange })
hi("@operator", { fg = p.fg })
hi("@keyword", { fg = p.orange })
hi("@exception", { fg = p.orange })
hi("@variable", { fg = p.fg })
hi("@type", { fg = p.blue })
hi("@type.definition", { fg = p.blue })
hi("@storageclass", { fg = p.blue })
hi("@structure", { fg = p.blue })
hi("@namespace", { fg = p.fg })
hi("@include", { fg = p.fg })
hi("@preproc", { fg = p.fg })
hi("@debug", { fg = p.fg })
hi("@tag", { fg = p.blue })

return {}
